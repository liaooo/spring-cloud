spring.application.name=api-gateway
server.port=5555

#同一个请求路径可能被多个路由匹配，匹配算法是线性匹配，返回第一个匹配的，
#而.properties文件不能保证顺序，使用.yaml文件可以保证顺序

#zuul.ignored-patterns参数配置不被api网关路由的url
#如下配置：/hello接口将不被路由
#zuul.ignored-patterns=/**/hello/**
#zuul.prefix=/api参数配置路由前缀

#路由规则配置 zuul.routes.<route-name>
#使用path/url映射规则的请求不会采用HystrixCommand命令包装，也没有负载均衡的功能
#1、传统路由规则转发配置，一组path/url的路由名称要一致（api-a-url）
zuul.routes.api-a-url.path=/api-a-url/**
#1)单实例
zuul.routes.api-a-url.url=http://localhost:8888/
#2)多实例，这里的serviceId是自定义的
#此参数需设置为false，因为默认情况下基于服务发现机制，ribbon会根据serviceId从服务注册中心获取实例列表
#ribbon.eureka.enabled=false
#zuul.routes.api-a-url.serviceId=service-id
#service-id.ribbon.listOfServer=http://localhost:8888/,http://localhost:8889/

#2、面向服务的路由
#path/serviceId组合的方式
zuul.routes.api-a.path=/api-a/**
zuul.routes.api-a.serviceId=hello-service
zuul.routes.api-b.path=/api-b/**
zuul.routes.api-b.serviceId=feign-consumer
#更简洁的方式zuul.routes.<serviceId>=<path>
zuul.routes.ribbon-consumer=/api-c/**
#指定eureka服务注册中心地址，可以将自己发布为服务，同时也可以从注册中心发现服务以实现path路由映射
eureka.client.serviceUrl.defaultZone=http://localhost:1111/eureka/

#3、默认服务路由规则
#引入Eureka之后，会为Eureka中的每一个服务自动创建一个默认的路由规则
#即：
# zuul.routes.<serviceId>=/<serviceId>/**
#亦即：
# zuul.routes.<serviceId>.path=/<serviceId>/**
# zuul.routes.<serviceId>.serviceId=<serviceId>
#通过参数zuul.ignored-services指定不自动创建路由的服务
#如：zuul.ignored-services=*

#4、自定义路由映射规则， 配置PatternServiceRouteMapper实现

#5、cookie与头信息
#默认情况下，zuul会过滤掉http请求头信息中的某些敏感信息，防止他们被传递到下游外部服务器。
#默认的敏感信息由zuul.sensitiveHeaders参数定义，包括Cookie,Set-Cookie,Authorization
#全局参数覆盖，允许传递。zuul.sensitiveHeaders=
#对指定路由设置是否传递，以下两种方式（推荐）
zuul.routes.api-a.customSensitiveHeaders=true
zuul.routes.api-b.sensitiveHeaders=Cookie,Set-Cookie,Authorization

#6、重定向问题：zuul.addHostHeader=true
#参数使得网关在进行路由转发前为请求设置Host头信息，以使得登录web应用后跳转的url隐藏具体的web应用实例地址

#7、禁用过滤器  zuul.<SimpleClassName>.<FilterType>.disable=true
#zuul.AccessFilter.pre.disable=true
zuul.CatchErrorFilter.error.disable=true
zuul.SendErrorFilter.error.diable=true